# -*- coding: utf-8 -*-
"""KerasTuner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Om52U8NJiqJ991aW8cfaBJdsG2zJK5E1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/diabetes.csv')

print(data.info())

print(data.sample(10))

X = data.drop('Outcome',axis=1)
y = data['Outcome']

# scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.2,random_state=1)

import tensorflow
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Dropout

# normal modeling without any hyperparameter tuning
model = Sequential()

model.add(Dense(32,activation='relu',input_dim=8))
model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='SGD',loss='binary_crossentropy',metrics=['accuracy'])

print(model.summary())

model.fit(X_train,y_train,batch_size=32,epochs=100,validation_data=(X_test,y_test),verbose=1)

# final val_accuracy without hyperparameter tuning = 0.7987

import keras_tuner as kt

# hyperparameter tuning
def build_model(hp):
  model = Sequential()

  counter = 0 # makes a check whether we are in first layer

  for i in range(hp.Int('num_layers',min_value=1,max_value=10)):
    if counter==0:   # first layer
      model.add(Dense(
          hp.Int('units'+str(i),min_value=8,max_value=128,step=8),
          activation= hp.Choice('activation'+str(i),values=['relu','tanh','sigmoid']),
          input_dim=8
        )
      )
      model.add(Dropout(hp.Choice('dropout'+str(i),values=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])))
    else: # inner layers
      model.add(Dense(
          hp.Int('units'+str(i),min_value=8,max_value=128,step=8),
          activation= hp.Choice('activation'+str(i),values=['relu','tanh','sigmoid']),
        )
      )
      model.add(Dropout(hp.Choice('dropout'+str(i),values=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])))
    counter += 1

  model.add(Dense(1,activation='sigmoid'))

  model.compile(
      optimizer=hp.Choice('optimizer'+str(i),values=['adam','rmsprop','adagrad','adadelta','sgd']),
      loss='binary_crossentropy',
      metrics=['accuracy']
  )

  return model

tuner = kt.RandomSearch(build_model,
                        objective='val_accuracy',
                        max_trials=10,
                        directory='mydir',
                        project_name='final_2')

tuner.search(X_train,y_train,epochs=5,validation_data=(X_test,y_test))

tuner.get_best_hyperparameters()[0].values

model = tuner.get_best_models(num_models=1)[0]

model.fit(X_train,y_train,epochs=200,initial_epoch=6,validation_data=(X_test,y_test))

# val_accuracy after tuning  = 0.7922