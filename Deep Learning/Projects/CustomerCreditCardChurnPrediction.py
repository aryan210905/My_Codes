# -*- coding: utf-8 -*-
"""CustomerCreditCardChurnPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqaEDniixlI1EkzW89LgBYwYjB6QZG_A
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv(r'D:\CODING_CODES\AIML\Deep Learning\Projects\Data\CustomerCreditCardChurn_data.csv')

print(df.sample(10))

# droppping unncessary columns
df.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)

print(df.sample(10))

print(df.info())

print(df['Geography'].value_counts())
print(df['Gender'].value_counts())

from sklearn.model_selection import train_test_split

X = df.drop('Exited',axis=1)
y = df['Exited']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=43)

# Encoding
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

transformer = ColumnTransformer(transformers=[
    ('nominal',OneHotEncoder(sparse_output=False,drop='first'),['Geography','Gender'])
],remainder='passthrough')

X_train_encoded = transformer.fit_transform(X_train)
X_test_encoded = transformer.transform(X_test)

# Scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_encoded)
X_test_scaled = scaler.transform(X_test_encoded)

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(11,activation='sigmoid',input_dim=11))
model.add(Dense(11,activation='sigmoid'))
model.add(Dense(1,activation='sigmoid'))

print(model.summary())

model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(X_train_scaled,y_train,batch_size=50,epochs=100,verbose=1,validation_split=0.2)

y_pred = model.predict(X_test_scaled)

print(y_pred)

y_pred = y_pred.argmax(axis=-1)

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test,y_pred)

print(accuracy)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.show()

