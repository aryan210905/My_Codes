# -*- coding: utf-8 -*-
"""HandwritingDigitDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YrHp-xtZA9BXlgWAdnZsO6zq1ZntMHd4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Flatten

(X_train,y_train),(X_test,y_test) = keras.datasets.mnist.load_data()

print(X_train.shape,y_train.shape)

print(X_train[0])

plt.imshow(X_train[0])
plt.show()

# currently values in X_train and X_test range from 0 to 255 so we will divide all values by 255 to make them come between 0 to 1
X_train = X_train/255
X_test = X_test/255

print(X_train[0])

model = Sequential()

# flattening the input data as the input layer will have 784 inputs but our X_train is a 2D array
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))

print(model.summary())

model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=10,validation_split=0.2)

y_prob = model.predict(X_test)

y_pred = y_prob.argmax(axis=1)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,y_pred)
print(accuracy)

# checking outputs
print(X_test[0])

plt.imshow(X_test[0])
plt.show()

print(model.predict(X_test[0].reshape(1,28,28)).argmax(axis=1))

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.show()