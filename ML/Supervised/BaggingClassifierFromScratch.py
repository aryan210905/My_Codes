# -*- coding: utf-8 -*-
"""baggingclassifierfromscratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ZT9z--kCGDmJkw2K84Y6YLv-PIrqZ8A
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder, LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import accuracy_score

data = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\personality_dataset.csv')

print(data.sample(10))

data['encoded_Personality'] = data['Personality'].map({'Introvert':0, 'Extrovert':1})

data.drop(['Personality'],axis=1,inplace=True)

transformer = ColumnTransformer(transformers=[
    ('tnf1',OneHotEncoder(drop='first',sparse_output=False,dtype=np.int32),['Stage_fear','Drained_after_socializing'])
],remainder='passthrough')

data_encoded = transformer.fit_transform(data)

print(data_encoded.shape)

encoded_cols = transformer.named_transformers_['tnf1'].get_feature_names_out(['Stage_fear','Drained_after_socializing'])
remainder_cols = [cols for cols in data.columns if cols not in ['Stage_fear','Drained_after_socializing']]
total_cols = list(encoded_cols) + remainder_cols

df = pd.DataFrame(data_encoded,columns=total_cols)
print(df.shape)

# creating samples
df = df.sample(1500)
df_train = df.iloc[0:300,:].sample(10)
df_val = df.iloc[300:900,:].sample(5)
df_test = df.iloc[900:,:].sample(5)

X_test = df_val.iloc[:,:-1].values
y_test = df_val.iloc[:,-1].values

# bagging with replacement i.e. some rows may repeat
df_bag = df_train.sample(8,replace=True)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]

desc1 = DecisionTreeClassifier()
desc1.fit(X,y)
plot_tree(desc1)
plt.show()
y_pred = desc1.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

# resampling and creating another tree
df_bag = df_train.sample(8,replace=True)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]
desc2 = DecisionTreeClassifier()
desc2.fit(X,y)
plot_tree(desc2)
plt.show()
y_pred = desc2.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

# resampling and creating another tree
df_bag = df_train.sample(8,replace=True)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]
desc3 = DecisionTreeClassifier()
desc3.fit(X,y)
plot_tree(desc3)
plt.show()
y_pred = desc3.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

# predicting
print(df_test)

print(f'Prediction for tree 1: {desc1.predict(np.array([0.0,	0.0,	1.0,	4.0,	6.0,	11.000000,	6.0]).reshape(1,7))}')
print(f'Prediction for tree 2: {desc2.predict(np.array([0.0,	0.0,	1.0,	4.0,	6.0,	11.000000,	6.0]).reshape(1,7))}')
print(f'Prediction for tree 3: {desc3.predict(np.array([0.0,	0.0,	1.0,	4.0,	6.0,	11.000000,	6.0]).reshape(1,7))}')

print(f'Prediction for tree 1: {desc1.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')
print(f'Prediction for tree 2: {desc2.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')
print(f'Prediction for tree 3: {desc3.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')

# bagging without replacement

df_bag = df_train.sample(8)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]
desc1 = DecisionTreeClassifier()
desc1.fit(X,y)
plot_tree(desc1)
plt.show()
y_pred = desc1.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

# resampling and creating another tree
df_bag = df_train.sample(8)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]
desc2 = DecisionTreeClassifier()
desc2.fit(X,y)
plot_tree(desc2)
plt.show()
y_pred = desc2.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

# resampling and creating another tree
df_bag = df_train.sample(8)
X = df_bag.iloc[:,:-1]
y = df_bag.iloc[:,-1:]
desc3 = DecisionTreeClassifier()
desc3.fit(X,y)
plot_tree(desc3)
plt.show()
y_pred = desc3.predict(X_test)
print(f'Accuracy = {accuracy_score(y_test,y_pred)}')

print(f'Prediction for tree 1: {desc1.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')
print(f'Prediction for tree 2: {desc2.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')
print(f'Prediction for tree 3: {desc3.predict(np.array([1.0,	1.0,	4.0,	2.0,	2.0,	6.268863,	0.0	]).reshape(1,7))}')

