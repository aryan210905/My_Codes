# -*- coding: utf-8 -*-
"""DecisionTreeClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OsAdf4hfZGy08UrrcHRhI4A9fEqijheW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder
from sklearn.compose import ColumnTransformer

data = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\classification_decision_tree_dataset.csv')

print(data.sample(10))

transformer = ColumnTransformer(transformers=[
    ('tnf1',OneHotEncoder(sparse_output=False,drop='first',dtype=np.int32),['Marital_Status']),
    ('tnf2',OrdinalEncoder(categories=[['High School', 'Bachelor', 'Master', 'PhD']]),['Education'])
],remainder='passthrough')

X = data.drop('Purchase',axis=1)
y = data['Purchase']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=43)

X_train_encoded = transformer.fit_transform(X_train)
X_test_encoded = transformer.transform(X_test)

treeModel = DecisionTreeClassifier()

parameters = {
    'criterion':['gini','entropy','log_loss'],
    'splitter':['random','best'],
    'max_depth' : [1,2,3,4,5,6,7,8,9,10],
    'max_features':['int','float','sqrt','log2']
}

grid = GridSearchCV(treeModel,param_grid=parameters,cv=5,scoring='accuracy')

grid.fit(X_train_encoded,y_train)

print(grid.best_params_)

plt.figure(figsize=(15,10))
tree.plot_tree(grid.best_estimator_,filled=True)

accuracy = accuracy_score(y_test,grid.predict(X_test_encoded))
print(accuracy)

