# -*- coding: utf-8 -*-
"""baggingclassifiercode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3FUCrLzRlbCtpX_Svojovrnvq-6yb_H
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.preprocessing import StandardScaler, LabelEncoder, OrdinalEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

X,y = make_classification(n_samples = 10000, n_features = 10, n_informative = 2)

X_train, X_test, y_train, y_test = train_test_split(X,y,train_size = 0.2, random_state = 32)

desc = DecisionTreeClassifier(random_state=32)
desc.fit(X_train, y_train)
y_pred = desc.predict(X_test)
print(f'Accuracy : {accuracy_score(y_test,y_pred)}')

estimators = {
    'estimator': [DecisionTreeClassifier()],
    'n_estimators': [10,50],
    'max_samples' : [0.5,1],
    'max_features': [0.5,1],
    'bootstrap' : [True, False],
    'bootstrap_features' : [True, False],
}

grid = GridSearchCV(BaggingClassifier(n_jobs=-1,verbose=1), param_grid=estimators, cv=5, scoring='accuracy')

grid.fit(X_train,y_train)

print(grid.best_params_)

print(grid.best_score_)

