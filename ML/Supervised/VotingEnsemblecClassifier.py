# -*- coding: utf-8 -*-
"""votingensembleclassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VDFjQyAwdLLLaF7XIkibwAM_7TrHzE8p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB

data = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\personality_dataset.csv')

data.sample(10)

# encoding
transformer = ColumnTransformer(transformers=[
    ('tnf1',OneHotEncoder(sparse_output=False, drop='first',dtype=np.int32),['Stage_fear','Drained_after_socializing'])
],remainder='passthrough')

X = data.drop(['Personality'],axis=1)
y = data['Personality']

X_encoded = transformer.fit_transform(X)

labelEncoder = LabelEncoder()
y_encoded = labelEncoder.fit_transform(y)

# scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)

# model
logReg = LogisticRegression()
tree = DecisionTreeClassifier()
svc = SVC(probability=True)
naive = GaussianNB()

myEstimators = [('logReg',logReg),('tree',tree),('svc',svc),('naive',naive)]

for estimator in myEstimators:
  x = cross_val_score(estimator[1],X_scaled,y_encoded,cv=10,scoring='accuracy')
  print(estimator[0],np.round(np.mean(x),2))

voting = VotingClassifier(estimators = myEstimators,voting='hard')
x = cross_val_score(voting,X_scaled,y_encoded,cv=10,scoring='accuracy')
print(np.mean(x))

