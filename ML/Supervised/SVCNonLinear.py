# -*- coding: utf-8 -*-
"""svcNonLinear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BsDcQ5piAWdIyITS1K1SBTd63MMFzOce
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

df = pd.read_csv('D:\CODING_CODES\AIML\ML\Supervised\Data\svm_nonlinear_100.csv')

print(df.sample(10))

df = df.drop('ID',axis=1)

X = df.drop('Decision',axis=1)
y = df['Decision']

class_0 = df[df['Decision'] == 'Class_0']
class_1 = df[df['Decision'] == 'Class_1']

# Plot
plt.figure(figsize=(8, 6))
plt.scatter(class_0['Feature_1'], class_0['Feature_2'], color='red', label='Class 0')
plt.scatter(class_1['Feature_1'], class_1['Feature_2'], color='blue', label='Class 1')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Non-linear Dataset Scatter Plot')
plt.legend()
plt.show()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=43)

encoder = LabelEncoder()
y_train_encoded = encoder.fit_transform(y_train)
y_test_encoded = encoder.transform(y_test)

svc = SVC()

params = {
    'C':[1,2,3,4,5,6,7,8,9,10],
    'kernel':['linear','poly','rbf','sigmoid'],
    'degree':[1,2,3,4,5,6,7,8,9],
    'gamma':['auto','scale']
}

model = GridSearchCV(svc, param_grid = params, cv=5, scoring='accuracy')

model.fit(X_train,y_train_encoded)

model.best_params_

accuracy = accuracy_score(y_test_encoded,model.predict(X_test))
accuracy

def plot_decision_boundary(model, X, y):
    X = np.array(X)
    h = 0.01
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title('SVM Decision Boundary')
    plt.show()

plot_decision_boundary(model.best_estimator_, X_train, y_train_encoded)

