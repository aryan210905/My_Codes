# -*- coding: utf-8 -*-
"""XGBClassifierHP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/aryanshah2109/xgbclassifierhp.98b5bdb0-c712-4863-83ed-18ea99f3d94d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250727/auto/storage/goog4_request%26X-Goog-Date%3D20250727T154240Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D1fe200400e44666e32422e7b2bf623e92e13bef6c98e90bf68895ab5859ec2172bf5dd1e7c5b900104aeb3e8c66e6ca7be01a569aada950f2aed09865887ee1d39b333d81e256f14f163b6ccb4c0b8e54717c823302b2c3e0f12eb416b600d6ae10333731b272f914c94f9226123009bcd86a8e8254b81b7b10405c028795dd145875654af92c74a6db9b083c82114cc78aedf91ccb8b2069b5b7f8b14b1cef6c48ae9b9ea5092507d86a4b11d0c94c928be1754cf99526c03745ff932a3bfcd747a77e1e0fba39da58832248908c8c2c69b90ff0438fa340b4889c4d8bf37ae4bfc4fa1dfe671f952e0d5c2e9ed759e4b1215db8733e41a6d65181214f6e398
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
data_path = kagglehub.dataset_download('rakeshkapilavai/extrovert-vs-introvert-behavior-data')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as snsac
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder, LabelEncoder
from sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score
import xgboost



data = pd.read_csv(data_path)


print(data.sample(10))


print(data.info())


# transformer
transformer = ColumnTransformer(transformers=[
    ('ohe',OneHotEncoder(sparse_output=False,dtype=np.int32,drop='first'),['Stage_fear','Drained_after_socializing'])
],remainder='passthrough')


# encoding
X = data.drop('Personality',axis=1)
X_encoded = transformer.fit_transform(X)


# label encoder
y = data['Personality']
label = LabelEncoder()
y = label.fit_transform(y)


# scaling
scaler = StandardScaler()
X = scaler.fit_transform(X_encoded)


# train test split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=23)


# normal single dtree
dtree = DecisionTreeClassifier()
dtree.fit(X_train,y_train)
print(accuracy_score(y_test,dtree.predict(X_test)))



# non tuned XGBClassifier
xgb = xgboost.XGBClassifier()
xgb.fit(X_train,y_train)
print(accuracy_score(y_test,xgb.predict(X_test)))


# tuned XGBClassifier
estimators = {
    'objective': ['binary:logistic','binary:logitraw'],
    'n_estimators':[50,100,200,250,300,500],  # no of trees
    'max_depth': range(1,11),   # max depth of each tree
    'learning_rate': [0.01,0.02,0.05,0.1,0.25,0.5,0.75,1],   # weightage of each tree
    'min_child_weight': range(1,11),   # minimum leaf node size
    'gamma' : [0.01,0.05,0.1,0.5,1,2,3,4],  # minimum loss reduction needed for further split of a leaf node
    'subsample' : [0.1,0.25,0.5,0.75],  # proportion of rows to give for randomness
    'colsample_bytree': [0.1,0.25,0.5,0.75],  # proportion of cols to give for randomness
    'lambda': [0.01,0.05,0.1,0.5,1,2,3,4],   # L2 regularization on weights
    'alpha': [0.01,0.05,0.1,0.5,1,2,3,4],    # L1 regularization on weights
    'tree_method':['auto','hist','gpu_hist'],  # hist -> speed, gpu_hist -> gpu
    'eval_metric':['logloss','auc','error']
}

tuner = RandomizedSearchCV(xgboost.XGBClassifier(),param_distributions=estimators,cv=5,n_jobs=-1,verbose=1,n_iter=10)
tuner.fit(X_train,y_train)


print(tuner.best_estimator_)
print(tuner.best_score_)
print(tuner.best_params_)

