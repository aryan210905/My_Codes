# -*- coding: utf-8 -*-
"""adaboost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VcOT4Azg8JhWpSOYr4EjnhwhWZ9G8smH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.tree import plot_tree, DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score

import kagglehub


data = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\ai_assistant_usage_student_life.csv')

data.sample(10)

print(data.info())

print(data.isna().sum())

print(data.columns)

print(data['person_education'].value_counts())

print(data['person_home_ownership'].value_counts())

print(data['loan_intent'].value_counts())

print(data['previous_loan_defaults_on_file'].value_counts())

def encoding_features(X):
  transformer = ColumnTransformer(transformers=[
   ('ordinal',OrdinalEncoder(categories=[['High School','Associate','Bachelor','Master','Doctorate']]),['person_education']),
   ('ohe',OneHotEncoder(drop='first',sparse_output=False,dtype=np.int32),['person_gender','person_home_ownership','loan_intent','previous_loan_defaults_on_file'])
  ],remainder='passthrough')
  X_encoded = transformer.fit_transform(X)
  return X_encoded

def encoding_label(y):
  label = LabelEncoder()
  y_encoded = label.fit_transform(y)
  return y_encoded

def scaling(X):
  scaler = StandardScaler()
  X_scaled = scaler.fit_transform(X)
  return X_scaled

def preprocess(data):
  X = data.drop(['loan_status'],axis=1)
  y = data['loan_status']

  X_encoded = encoding_features(X)
  y_encoded = encoding_label(y)
  X_scaled = scaling(X_encoded)

  X_train,X_test,y_train,y_test = train_test_split(X_scaled,y_encoded,test_size=0.2,random_state=34)

  return X_train,X_test,y_train,y_test

X_train,X_test,y_train,y_test = preprocess(data)

param_distributions = {
    'n_estimators':[1,5,10,25,50,100,150,200,250],
    'learning_rate':[0.1,0.2,0.5,0.7,1,1.5,2,2.5,3],
}

model = RandomizedSearchCV(AdaBoostClassifier(),param_distributions,cv=10,n_jobs=-1,scoring='accuracy',random_state=34)

model.fit(X_train,y_train)

print(model.best_params_)

print(model.best_score_)

