# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sN6-jOwAQMhkYanK7x-PrtYQKmsZEUdz
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder, LabelEncoder
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

data = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\personality_dataset.csv')

print(data.sample(5))

X = data.drop(['Personality'],axis=1)
y = data['Personality']

# encoding
transformer = ColumnTransformer(transformers=[
    ('ohe',OneHotEncoder(sparse_output=False, dtype= np.int32, drop='first'),['Stage_fear','Drained_after_socializing'])
],remainder = 'passthrough')
X_encoded = transformer.fit_transform(X)

label = LabelEncoder()
y_encoded = label.fit_transform(y)

# train test split
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=34)

# single decision tree model
desc = DecisionTreeClassifier(random_state= 34)
desc.fit(X_train,y_train)
plot_tree(desc)
print(accuracy_score(y_test, desc.predict(X_test)))

# non tuned random forest
rf = RandomForestClassifier()
rf.fit(X_train,y_train)
print(accuracy_score(y_test,rf.predict(X_test)))

# non tuned random forest >>> decision tree

# get number of decision trees it used
print(rf.estimators_)

# hyperparamter tuning
parameters = {
    'n_estimators': [10,50,100,200,300,500],
    'criterion': ['gini','entropy'],
    'max_depth' : [1,2,3,4,5,10],
    'max_features': ['sqrt','log2'],
    'bootstrap' : [True, False],
}

model = RandomizedSearchCV(RandomForestClassifier(),param_distributions= parameters, cv=5, n_jobs=-1, verbose=1)

model.fit(X_train,y_train)

print(model.best_score_)

print(model.best_params_)

rf2 = model.best_estimator_

print(rf2.feature_importances_)

