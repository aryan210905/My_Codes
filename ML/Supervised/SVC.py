# -*- coding: utf-8 -*-
"""SVC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oInLueZX7Wg_Pqqd_K2-2Ve-eJrQqiIC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from mlxtend.plotting import plot_decision_regions

df = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Supervised\Data\svm_practice_100.csv')

df = df.drop('ID',axis=1)  # unnecessary column

accept = df[df['Decision'] == 'Accept']
reject = df[df['Decision'] == 'Reject']

# Plot
plt.figure(figsize=(8, 6))
plt.scatter(accept['Exam_Score'], accept['Interview_Score'], color='blue', label='Accept')
plt.scatter(reject['Exam_Score'], reject['Interview_Score'], color='red', label='Reject')
plt.xlabel('Exam Score')
plt.ylabel('Interview Score')
plt.title('Scatter Plot of Exam vs Interview Scores')
plt.legend()
plt.show()

print(df.info())

X = df.drop('Decision',axis=1)
y = df['Decision']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

encoder = LabelEncoder()
y_train_transformed = encoder.fit_transform(y_train)
y_test_transformed = encoder.transform(y_test)

svc_model = SVC()

params = {
    'C':[1,2,3,4,5,6,7,8,9,10],
    'kernel':['linear','poly','rbf','sigmoid'],
    'degree':[1,2,3,4,5,6],
    'gamma':['scale','auto']
}

model = GridSearchCV(svc_model,param_grid=params,cv=5,scoring='accuracy')

model.fit(X_train,y_train_transformed)

print(model.best_params_)

accuracy = accuracy_score(y_test_transformed,model.predict(X_test))
accuracy

plot_decision_regions(X_train.values, y_train_transformed, clf=model, legend=2)

plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('SVM Decision Boundary using mlxtend')
plt.show()

