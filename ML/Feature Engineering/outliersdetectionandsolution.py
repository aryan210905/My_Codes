# -*- coding: utf-8 -*-
"""OutliersDetectionAndSolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17WS2Gdg9loNQOcKTQU5xvlWsgicuFe4L
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv(r'D:\CODING_CODES\AIML\ML\Feature Engineering\Data\placement.csv')

print(df.sample(5))

sns.displot(df['cgpa'])
plt.show()

sns.displot(df['placement_exam_marks'])
plt.show()

# cgpa -> normal distribution
# placement_exam_marks -> skewed distribution

########### Z-Score technique ############
print(df['cgpa'].mean())
print(df['cgpa'].std())
print(df['cgpa'].min())
print(df['cgpa'].max())

min_scale = df['cgpa'].mean() - 3*df['cgpa'].std()
max_scale = df['cgpa'].mean() + 3*df['cgpa'].std()

df[(df['cgpa']<min_scale) | (df['cgpa']>max_scale)]

# Trimming -> removing rows which are outliers
new_df = df[(df['cgpa']>min_scale) & (df['cgpa']<max_scale)]
print(new_df.sample(10))

# alternate method -> calculate Z-Score
df['cgpa_z_score'] = (df['cgpa']-df['cgpa'].mean())/df['cgpa'].std()
print(df.sample(5))

# rows with z_score > 3 or < -3 are outliers
new_df = df[(df['cgpa_z_score']>-3) & (df['cgpa_z_score']<3)]
print(new_df)
print(new_df.describe())

# capping -> updating outliers values with min/max scaling value
df['cgpa'] = np.where(df['cgpa']>max_scale,max_scale,np.where(df['cgpa']<min_scale,min_scale,df['cgpa']))

print(df.describe())

df = pd.read_csv('/content/placement.csv')

########### IQR technique ############
# used when data is skewed
sns.displot(df['placement_exam_marks'])
plt.show()

sns.boxplot(df['placement_exam_marks'])
plt.show()

percentile_25 = df['placement_exam_marks'].quantile(0.25)
percentile_75 = df['placement_exam_marks'].quantile(0.75)

IQR = percentile_75 - percentile_25

max_scale = percentile_75 + 1.5*IQR
min_scale = percentile_25 - 1.5*IQR

df[(df['placement_exam_marks']>max_scale) | (df['placement_exam_marks']<min_scale)]

# Trimming
new_df = df[(df['placement_exam_marks']<max_scale)&(df['placement_exam_marks']>min_scale)]
print(new_df.info())

# Capping
df['new_placement'] = np.where(df['placement_exam_marks']>max_scale,max_scale,np.where(df['placement_exam_marks']<min_scale,min_scale,df['placement_exam_marks']))

print(df.sample(10))

